<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nixops on kalbasit</title>
    <link>https://kalbas.it/tags/nixops/</link>
    <description>Recent content in Nixops on kalbasit</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 24 Feb 2019 18:50:58 -0800</lastBuildDate>
    
	<atom:link href="https://kalbas.it/tags/nixops/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Website with NixOS/NixOPS, with automated let&#39;s encrypt</title>
      <link>https://kalbas.it/2019/02/24/website-with-nixos-nixops-with-automated-lets-encrypt/</link>
      <pubDate>Sun, 24 Feb 2019 18:50:58 -0800</pubDate>
      
      <guid>https://kalbas.it/2019/02/24/website-with-nixos-nixops-with-automated-lets-encrypt/</guid>
      <description>Overview Working with Let&amp;rsquo;s Encrypt can sometimes be quite difficult, especially when setting up your own load balancer in front of your application servers. This article give you a step by step instructions on how to create a server, running NixOS and managed by NixOPS.
System Design Let&amp;rsquo;s first talk about the sytem design of our load-balanced application. We want to run two replicas of a hello world application (written in Go), behind a load balancer running NginX.</description>
    </item>
    
  </channel>
</rss>